import type { NextPage } from 'next'
import Head from 'next/head'
import { ChangeEvent, useState } from 'react';
import Card from '../components/card';
import Layout from '../components/layout';
import Select from '../components/select';
import { SmiteGod } from '../models/smite.god';
import { SmiteService } from '../services/smite.service';
import styles from '../styles/Home.module.css'

interface CardData {
  smiteGod: SmiteGod;
  isFlipped: boolean;
  selectedRole: string;
}

export interface HomeProps {
  smiteGods: SmiteGod[];
  roles: string[];
}

const Home: NextPage<HomeProps> = ({ smiteGods, roles }) => {
  const cardCount: number = 5;
  const defaultCardData: CardData[] = [];
  for (let i = 0; i < cardCount; i++) {
    defaultCardData.push({
      smiteGod: smiteGods[i],
      isFlipped: false,
      selectedRole: roles[0],
    });
  }
  const [cardData, setCardData] = useState<CardData[]>(defaultCardData);

  const randomizeAll = () => {
    const newCardData: CardData[] = [];
    const lastSmiteGodNames: string[] = cardData.map((data: CardData) => data.smiteGod.name);

    const getAvailableSmiteGodIndicesByRole = (role: string): number[] => smiteGods.reduce((list: number[], smiteGod: SmiteGod, smiteGodIndex: number) => {
      const isValidRole: boolean = role === "Any" || smiteGod.roles.includes(role);
      const isNotPreviouslyChosen: boolean = !lastSmiteGodNames.includes(smiteGod.name);
      const isNotChosen: boolean = !newCardData.map((data: CardData) => data.smiteGod.name).includes(smiteGod.name);
      if (isValidRole && isNotPreviouslyChosen && isNotChosen) {
        list.push(smiteGodIndex);
      }
      return list;
    }, []);

    const getRandomSmiteGodFrom = (available: number[]): number => {
      const index: number = Math.floor(Math.random() * available.length);
      return available[index];
    }

    for (let i = 0; i < cardData.length; i++) {
      const role: string = cardData[i].selectedRole;
      const available: number[] = getAvailableSmiteGodIndicesByRole(role);
      const smiteGodIndex: number = getRandomSmiteGodFrom(available);
      newCardData.push({
        ...cardData[i],
        smiteGod: smiteGods[smiteGodIndex],
        isFlipped: false,
      }); 
    }
    setCardData(newCardData);
  }

  const onChangeRole = (cardIndex: number) => (selectedRole: string) => setCardData(cardData.map((data: CardData, index: number) =>
    index === cardIndex
    ? { ...data, selectedRole }
    : data
  ));

  const flip = (cardIndex: number) => () => setCardData(cardData.map((data: CardData, index: number) =>
    index === cardIndex
    ? { ...data, isFlipped: true }
    : data
  ));

  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.cards}>
        {cardData.map(({ smiteGod, isFlipped, selectedRole }: CardData, cardIndex: number) => {
          const { name, godCardURL, title, pantheon}: SmiteGod = smiteGod;
          return (
            <div key={`${name}-${cardIndex}`}>
              <Card flipped={isFlipped} onClick={flip(cardIndex)}>
                <Card.Front>
                  <img className={styles.image} src="/hexagons.svg" alt="Hexagon Pattern SVG" />
                </Card.Front>
                <Card.Back>
                  <Card.Background imageURL={godCardURL}>
                    <div className={styles.content}>
                      <h1>{name}</h1>
                      <p>{title}</p>
                      <p>{pantheon}</p>
                    </div>
                  </Card.Background>
                </Card.Back>
              </Card>
              <Select options={roles} defaultValue={selectedRole} onChange={onChangeRole(cardIndex)} />
            </div>
          );
        })}
      </div>
      <button type="button" onClick={randomizeAll}>Randomize</button>
    </Layout>
  );
}

export default Home

export async function getStaticProps() {
  const smiteGods: SmiteGod[] = SmiteService.getGods();
  const roles: string[] = SmiteService.getRoles();
  return {
    props: {
      smiteGods,
      roles,
    },
  };
}
